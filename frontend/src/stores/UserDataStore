import { ref, reactive } from 'vue'

// Create a reactive store that can be imported across components
const userData = reactive({
  gender: null,
  age: 25,
  height: 170,
  weight: 70,
  activity_level: null,
  goal: 'maintain', // Default goal (can be updated later if you add a goal selection UI)
  location: '',
})

// Flag to track if data is being loaded from backend
const isLoading = ref(false)

// Export functions to interact with the store
export function useUserDataStore() {
  // Save all current data to backend
  const saveToBackend = async () => {
    try {
      isLoading.value = true
      const response = await fetch('http://localhost:8000/api/user-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      })

      if (!response.ok) {
        throw new Error('Failed to save user data')
      }

      return await response.json()
    } catch (error) {
      console.error('Error saving user data:', error)
      throw error
    } finally {
      isLoading.value = false
    }
  }

  // Load all data from backend
  const loadFromBackend = async () => {
    try {
      isLoading.value = true
      const response = await fetch('http://localhost:8000/api/user-data')

      if (!response.ok) {
        throw new Error('Failed to fetch user data')
      }

      const data = await response.json()

      // Update store with retrieved data
      Object.assign(userData, data)
      return data
    } catch (error) {
      console.error('Error loading user data:', error)
      // Don't throw error here to prevent app from breaking if backend is unavailable
      return {}
    } finally {
      isLoading.value = false
    }
  }

  // Update specific field in user data
  const updateUserData = (field, value) => {
    userData[field] = value
  }

  // Utility to check if all required data is present
  const hasRequiredData = () => {
    return (
      userData.gender &&
      userData.age &&
      userData.height &&
      userData.weight &&
      userData.activity_level &&
      userData.goal &&
      userData.location
    )
  }

  return {
    userData,
    isLoading,
    saveToBackend,
    loadFromBackend,
    updateUserData,
    hasRequiredData,
  }
}
